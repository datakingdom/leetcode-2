/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {

    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> list = new ArrayList<Interval>();
        if(intervals.size() == 0) return list;
        Collections.sort(intervals,new IntervalComparator());
        list.add(intervals.get(0));
        for(int i = 1; i < intervals.size(); i++) {
            if(intervals.get(i).start <= list.get(list.size()-1).end) {
                list.get(list.size()-1).end = Math.max(intervals.get(i).end,list.get(list.size()-1).end);
            }else {
                list.add(intervals.get(i));
            }
        }
        return list;
    }
    class IntervalComparator implements Comparator<Interval> {  
    public int compare(Interval i1, Interval i2) {  
        return i1.start - i2.start;  
    }  
  }
