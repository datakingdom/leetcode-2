public class NQueensII {
	boolean[][] board;
    int cnt = 0;
    public int totalNQueens(int n) {
        if(n == 0) return 0; // corner case;
        board = new boolean[n][n];
        dfs(board, 0);
        return cnt;
    }
    
    private void dfs(boolean[][] board, int ind) {
        if(ind == board.length) cnt++;
        else {
            for(int i = 0; i < board.length; i++) {
                if(check(board, ind, i) == true) {
                    board[ind][i] = true;
                    dfs(board, ind+1);
                    board[ind][i] = false;
                }
            }
        }
    }
    
    private boolean check(boolean[][] board, int x, int y) {
        int n = board.length;
        for(int i = 0; i < n; i++) {
            if(board[x][i] == true || board[i][y] == true)
                return false;
        }
        
        int xx = x, yy = y;
        while(xx >= 0 && yy >= 0) {
            if(board[xx][yy] == true)
                return false;
            xx--; yy--;
        }
        
        xx = x; yy = y;
        while(xx >= 0 && yy < n) {
            if(board[xx][yy] == true)
                return false;
            xx--; yy++;
        }
        
        xx = x; yy = y;
        while(xx < n && yy >= 0) {
            if(board[xx][yy] == true)
                return false;
            xx++; yy--;
        }
        
        xx = x; yy = y;
        while(xx < n && yy < n) {
            if(board[xx][yy] == true) 
                return false;
            xx++; yy++;
        }
        
        return true;
    }
}
