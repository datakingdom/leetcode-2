import java.util.*;
public class WordSearch {
	HashSet<String> prefix;
	boolean[][] mark;
	private boolean dfs(String s, int x, int y, char[][] board, String word) {
		int m = board.length;
		int n = board[0].length;
		if(prefix.contains(s) == true) {
			if(s.length() == word.length()) {
				return true;
			}
			else if(s.length() < word.length()) {
				boolean stat = false;
				if(x-1 >= 0 && mark[x-1][y] == false && stat == false) { // terminate immediately if we find the word
					mark[x-1][y] = true;
					stat = stat | dfs(s+board[x-1][y], x-1, y, board, word);
					mark[x-1][y] = false;
				}
				if(x+1 < m && mark[x+1][y] == false && stat == false) {
					mark[x+1][y] = true;
					stat = stat | dfs(s+board[x+1][y], x+1, y, board, word);
					mark[x+1][y] = false;
				}
				if(y-1 >= 0 && mark[x][y-1] == false && stat == false) {
					mark[x][y-1] = true;
					stat = stat | dfs(s+board[x][y-1], x, y-1, board, word);
					mark[x][y-1] = false;
				}
				if(y+1 < n && mark[x][y+1] == false && stat == false) {
					mark[x][y+1] = true;
					stat = stat | dfs(s+board[x][y+1], x, y+1, board, word);
					mark[x][y+1] = false;
				}
				return stat;
			}
			else return false;
		}
		else return false;
	}

	public boolean exist(char[][] board, String word) {
		int m = board.length;
		if(m == 0) return word.length() == 0;
		int n = board[0].length;
		mark = new boolean[m][n];
		prefix = new HashSet<String>();

		for(int i = 0; i < word.length(); i++) 
			prefix.add(word.substring(0, i+1));
		for(int i = 0; i < m; i++) {
			for(int j = 0; j < n; j++) {
				mark[i][j] = true;
				if(dfs(""+board[i][j], i, j, board, word) == true)
					return true;
				mark[i][j] = false;
			}
		}

		return false;
	}

	public static void main(String[] args) {
		char[][] board = {{'A', 'B', 'C', 'E'}, {'S', 'F', 'C', 'S'}, {'A', 'D', 'E', 'E'}};
		WordSearch ws = new WordSearch();
		System.out.println(ws.exist(board, "ABCCED"));
		System.out.println(ws.exist(board, "SEE"));
		System.out.println(ws.exist(board, "ABCB"));
	}
}
