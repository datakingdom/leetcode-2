import java.util.*;

public class MergeIntervals {
	public List<Interval> merge(List<Interval> intervals) {
		Object[] obj = intervals.toArray();
		int n = obj.length;
		if(n == 0) return new ArrayList<Interval>();
		Interval[] arr = new Interval[n];
		for(int i = 0; i < n; i++)
			arr[i] = (Interval)obj[i];
		ArrayList<Interval> res = new ArrayList<Interval>();
		Arrays.sort(arr, new intervalComparator());
		int start = arr[0].start, end = arr[0].end;
		for(int i = 0; i < n; i++) {
			if(arr[i].start <= end) {
				end = Math.max(end, arr[i].end);
			}
			else {
				Interval temp = new Interval(start, end);
				res.add(temp);
				start = arr[i].start; end = arr[i].end;
			}
			if(i == n-1) {
				Interval temp = new Interval(start, end);
				res.add(temp);
			}
		}
		return res;
	}

	public class intervalComparator implements Comparator<Interval> {
		public int compare(Interval i1, Interval i2) {
			if(i1.start < i2.start) return -1;
			else if(i1.start > i2.start) return 1;
			else {
				if(i1.end < i2.end) return -1;
				else if(i1.end > i2.end) return 1;
				else return 0;
			}
		}
	}
}
