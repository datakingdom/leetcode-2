/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
		if(preorder.size()==0)
			return NULL;

		return buildTreeHelper(inorder,preorder,0,inorder.size()-1,0,preorder.size()-1);
    }
	
	TreeNode *buildTreeHelper(vector<int> &inorder, vector<int> &preorder, int i_start, int i_end, int p_start,int p_end)
	{
		if(i_start>i_end)
			return NULL;

		TreeNode* parent = new TreeNode(preorder[p_start]);
		//find the index for pivot in inorder
		int pivot;
		for(int i  = i_start ; i <= i_end;++i)
		{
			if(inorder[i] == preorder[p_start])
			{
				pivot = i;
				break;
			}
		}
		

		int first_len = pivot-i_start;
		parent->left = buildTreeHelper(inorder,preorder,i_start,pivot-1,p_start+1,p_start+first_len);
		parent->right = buildTreeHelper(inorder,preorder,pivot+1,i_end,p_start+1+first_len,p_end);

		return parent;

	}
};
