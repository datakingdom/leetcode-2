public class SortList {
	public ListNode sortList(ListNode head) {
		if(head == null || head.next == null) return head;
		ListNode sent = new ListNode(0);
		ListNode sent1 = new ListNode(0);
		ListNode sent2 = new ListNode(0);
		ListNode sent_head = new ListNode(0);
		sent_head.next = head;
		ListNode temp, temp1, temp2, t1, t2, prior;
		temp = head;
		int n = 0;
		while(temp != null) {
			temp = temp.next;
			n++;
		} // length of the list
		int cnt = 1, count;

		while(cnt < n) {
			prior = sent_head;
			while(prior.next != null) {
				temp1 = prior.next;
				sent1.next = temp1;
				count = cnt;
				while(temp1 != null && temp1.next != null && count > 1) {
					temp1 = temp1.next;
					count--;
				}
				temp2 = temp1.next;
				temp1.next = null;
				if(temp2 == null) {
					break;
				}
				sent2.next = temp2;
				count = cnt;
				while(temp2 != null && temp2.next != null && count > 1) {
					temp2 = temp2.next;
					count--;
				}
				temp = temp2.next;
				temp2.next = null; // partition

				sent.next = null;
				temp1 = sent;
				t1 = sent1.next;
				t2 = sent2.next;
				while(t1 != null && t2 != null) {
					if(t1.val < t2.val) {
						temp1.next = t1;
						t1 = t1.next;
						temp1 = temp1.next;
					}
					else {
						temp1.next = t2;
						t2 = t2.next;
						temp1 = temp1.next;
					}
				}
				if(t1 == null) {
					while(t2 != null) {
						temp1.next = t2;
						t2 = t2.next;
						temp1 = temp1.next;
					}
				}
				else {
					while(t1 != null) {
						temp1.next = t1;
						t1 = t1.next;
						temp1 = temp1.next;
					}
				} // merge two parts
				temp1.next = null;

				prior.next = sent.next;
				temp1.next = temp;
				prior = temp1;
			}
			cnt = 2*cnt;
		}
		return sent_head.next;
	}

	public static void main(String[] args) {
		SortList sl = new SortList();
		ListNode node1 = new ListNode(1);
		ListNode node2 = new ListNode(2);
		ListNode node3 = new ListNode(3);
		ListNode node4 = new ListNode(4);
		ListNode node5 = new ListNode(5);
		ListNode node6 = new ListNode(6);
		node3.next = node1; node1.next = node2; node2.next = node6; node6.next = node5; node5.next = node4;
		ListNode head = sl.sortList(node5);
		while(head != null) {
			System.out.println(head.val);
			head = head.next;
		}
	}
}
