public class MedianofTwoSortedArrays {

	public double findMedianSortedArrays(int A[], int B[]) {
		int m = A.length;
		int n = B.length;
		if((m+n) % 2 != 0) {
			int k = (m+n) / 2 + 1;
			return findKthSmallest(A, 0, m-1, B, 0, n-1, k);
		}
		else {
			int k = (m+n) / 2 + 1;
			return (double)(findKthSmallest(A, 0, m-1, B, 0, n-1, k) + findKthSmallest(A, 0, m-1, B, 0, n-1, k-1)) / 2;
		}
	}

	public int findKthSmallest(int[] A, int bega, int enda, int[] B, int begb, int endb, int k) {
		int i = (int)((double)(enda-bega+1) / (enda-bega+1 + endb-begb+1) * (k-1));
		int j = k - 1 - i;

		int Ai_1 = (i <= 0) ? Integer.MIN_VALUE : A[bega+i-1];
		int Bj_1 = (j <= 0) ? Integer.MIN_VALUE : B[begb+j-1];
		int Ai = (i >= enda-bega+1) ? Integer.MAX_VALUE : A[bega+i];
		int Bj = (j >= endb-begb+1) ? Integer.MAX_VALUE : B[begb+j];

		if(Bj_1 < Ai && Ai <= Bj) return Ai;
		else if(Ai_1 < Bj && Bj <= Ai) return Bj;

		if(Ai < Bj) 
			return findKthSmallest(A, bega+i+1, enda, B, begb, begb+j-1, k-i-1);
		else 
			return findKthSmallest(A, bega, bega+i-1, B, begb+j+1, endb, k-j-1);
	}

	public static void main(String[] args) {
		int[] A = {1, 2};
		int[] B = {1, 2};
		MedianofTwoSortedArrays mt = new MedianofTwoSortedArrays();
		System.out.println(mt.findMedianSortedArrays(A, B));
		System.out.println(mt.findKthSmallest(A, 0, 1, B, 0, 1, 3));
	}
}
