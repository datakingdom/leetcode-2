public class ValidSudoku {
	public boolean isValidSudoku(char[][] board) {
        int m = board.length;
        int n = board[0].length;
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(board[i][j] != '.') {
                    if(valid(board, i, j, board[i][j]) == false)
                        return false;
                }
            }
        }
        return true;
    }
    
    private boolean valid(char[][] board, int x, int y, char key) {
        int m = board.length;
        int n = board[0].length;
        for(int i = 0; i < m; i++) {
            if(i != x && board[i][y] == key)
                return false;
        } // check colmun
        
        for(int i = 0; i < n; i++) {
            if(i != y && board[x][i] == key)
                return false;
        } // check row
        
        for(int i = (x/3)*3; i < (x/3+1)*3; i++) {
            for(int j = (y/3)*3; j < (y/3+1)*3; j++) {
                if(i != x && j != y && board[i][j] == key)
                    return false;
            }
        } // check nine-box
        
        return true; 
    }
}
