/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; left = null; right = null; }
 * }
 */
public class Solution {
    public List<TreeNode> generateTrees(int n) {
        return build(0,n-1);
    }
    public List<TreeNode> build(int start, int end) {
        List<TreeNode> list = new ArrayList<TreeNode>();
        if(start > end) {
            list.add(null);
            return list;
        }
        for(int i = start; i <= end; i++) {
            List<TreeNode> left = build(start,i-1);
            List<TreeNode> right = build(i+1,end);
            for(int m = 0; m < left.size(); m++) {
                for(int n = 0; n < right.size(); n++) {
                    TreeNode root = new TreeNode(i+1);
                    list.add(root);
                    root.left = left.get(m);
                    root.right = right.get(n);
                }
            }
        }
        return list;
    }
}
