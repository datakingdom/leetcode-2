public class Solution {
    public String minWindow(String S, String T) {
        if(T.length() == 0) return T;
        if(S.length() == 0) return S;
        int[] needsTofind = new int[256];
        int[] hasfind = new int[256];
        int count = 0, begin = 0, minlen = Integer.MAX_VALUE, minbegin = -1, minend = 0;

        for(int i = 0; i < T.length(); i++) {
            needsTofind[T.charAt(i)-'0']++;
        }
        
        for(int i = 0; i < S.length(); i++) {
            if(needsTofind[S.charAt(i)-'0']==0) continue;
            hasfind[S.charAt(i)-'0']++;
            
            if(hasfind[S.charAt(i)-'0'] <= needsTofind[S.charAt(i)-'0']) {
                count++;
            }
            if(count == T.length()) {
                while(needsTofind[S.charAt(begin)-'0']==0 || hasfind[S.charAt(begin)-'0'] > needsTofind[S.charAt(begin)-'0']) {
                    if(hasfind[S.charAt(begin)-'0'] > needsTofind[S.charAt(begin)-'0']) {
                        hasfind[S.charAt(begin)-'0']--;
                    }
                    begin++;
                }
                int templen = i-begin+1;
                if(templen < minlen) {
                    minbegin = begin;
                    minend = i;
                    minlen = templen;
                }
            }
        }
        if(minbegin == -1) return "";
        return S.substring(minbegin,minend+1);
    }
}
