public class Solution {
    public ArrayList<ArrayList<Integer>> combine(int n, int k) {
        ArrayList<ArrayList<Integer>> out = new ArrayList<ArrayList<Integer>>();
        if(n<k || n<1 || k<1) return out;
        ArrayList<Integer> in = new ArrayList<Integer>();
        for(int i = 1; i <= n; i++) {
            in.add(i);
            DFS(n,k,i,in,out);
            in.remove(in.size()-1);
        }
        return out;
    }
    public void DFS(int n, int k, int start, ArrayList<Integer> in, ArrayList<ArrayList<Integer>> out) {
        if(in.size() == k) {
            out.add(new ArrayList<Integer>(in));
            return;   
        }
        for(int i = start+1; i <= n; i++) {
            in.add(i);
            DFS(n,k,i,in,out);
            in.remove(in.size()-1);
        }
    }
}
