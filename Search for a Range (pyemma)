public class SearchForARange {
	public int findLeft(int[] A, int target) {
        int n = A.length;
        int l = 0, r = n-1;
        
        while(l <= r) {
            int mid = l + (r - l) / 2;
            if(A[mid] == target) {
                if(mid == 0) return mid;
                else if(A[mid - 1] < target) return mid;
                else r = mid - 1;
            }
            else if(A[mid] < target) l = mid + 1;
            else r = mid - 1;
        }
        return -1;
    }
    
    public int findRight(int[] A, int target) {
        int n = A.length;
        int l = 0, r = n-1;
        
        while(l <= r) {
            int mid = l + (r - l) / 2;
            if(A[mid] == target) {
                if(mid == n-1) return mid;
                else if(A[mid + 1] > target) return mid;
                else l = mid + 1;
            }
            else if(A[mid] < target) l = mid + 1;
            else r = mid - 1;
        }
        return -1;
    }
    
	public int[] searchRange(int[] A, int target) {
		int n = A.length;
		int[] res = new int[2];
		
		if(n == 0) return res; // invalid case
		
		int l = findLeft(A, target);
		int r = findRight(A, target);
		
		res[0] = l; res[1] = r;
		return res;
	}
}
