class Solution {
public:
    int maxProfit(vector<int> &prices) {
        int n = prices.size();
        if(n < 2)   return 0;
        int profit = 0;
        int lowest = prices[0];
        int highest = prices[n - 1];
        vector<int> L(n + 1, 0);
        vector<int> R(n + 1, 0);
        for(int i = 1; i < n; i++){
            if(lowest > prices[i]){
                lowest = prices[i];
                L[i] = L[i - 1];
            }
            else{
                L[i] = max(L[i - 1], prices[i] - lowest);
            }
        }
        for(int i = n - 1; i >= 0; i--){
            if(highest < prices[i]){
                highest = prices[i];
                R[i] = R[i + 1];
            }
            else{
                R[i] = max(highest - prices[i], R[i + 1]);
            }
        }
        for(int i = 0; i < n - 1; i++){
            profit = max(profit, L[i] + R[i]);
        }
        return profit;
    }
};
