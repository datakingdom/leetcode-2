 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        int inlen = inorder.length, polen = postorder.length;
        if(inlen != polen || inlen == 0 || polen == 0) return null;
        HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
        
        for(int i = 0; i < inlen; i++) {
            map.put(inorder[i],i);
        }
        return build(map,inorder,0,inlen-1,postorder,0,polen-1);
        
    }
    public TreeNode build(HashMap<Integer,Integer> map, int[] inorder, int is, int ie, int[] postorder, int ps, int pe) {
        if(ps > pe) return null;
        TreeNode root = new TreeNode(postorder[pe]);
        if(ps == pe) return root;
        
        int x = map.get(postorder[pe]);
        root.left = build(map,inorder,is,x-1,postorder,ps,ps+x-is-1);
        root.right = build(map,inorder,x+1,ie,postorder,ps+x-is,pe-1);
        return root;
    }
}
