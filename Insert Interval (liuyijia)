/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) 
	{
        int start = 0, end = 0;
		int size = intervals.size();
		if (size == 0 || newInterval.start > intervals[size - 1].end)
		{
			intervals.push_back(newInterval);
			return intervals;
		}
		for (int i = 0; i < size; i++)
		{
			if (newInterval.start <= intervals[i].end)
			{
				newInterval.start = min(newInterval.start, intervals[i].start);
				start = i;
				break;
			}
		}
		if (start == 0)
		{
			if (newInterval.end < intervals[0].start) 
			{
				intervals.insert(intervals.begin(), newInterval);
				return intervals;
			}
		}
		else
		{
			if (newInterval.end < intervals[start].start) 
			{
				if (newInterval.start > intervals[start - 1].end)
				{
					intervals.insert(intervals.begin() + start, newInterval);
					return intervals;
				}
				else
				{
					intervals[start - 1].end = max(intervals[start - 1].end, newInterval.end);
					return intervals;
				}
			}
		}
		for (int i = start; i < size; i++)
		{
			if (newInterval.end < intervals[i].end)
			{
				if (newInterval.end >= intervals[i].start)
				{
					newInterval.end = intervals[i].end;
					end = i;
				}
				else end = i - 1;
				break;
			}
		}
		if (newInterval.end >= intervals[size - 1].end) end = size - 1;
		intervals.erase(intervals.begin() + start, intervals.begin() + end + 1);
		intervals.insert(intervals.begin() + start, newInterval);
		return intervals;
    }
};
