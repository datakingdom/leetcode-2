public class Solution {
    public int ladderLength(String start, String end, Set<String> dict) {
        if(start.equals("") || end.equals("") || start.equals(end) || start.length()!=end.length()) return 0;
        if(onestep(start, end)) return 2;
        Queue<String> queue=new LinkedList<String>();
        HashMap<String, Integer> map=new HashMap<String,Integer>();
        queue.add(start);
        map.put(start, 1);
        while (!queue.isEmpty()) {      	
        	String last=queue.poll();
        	int dist=map.get(last);
            for (int i = 0; i < last.length(); i++) {
    			for (char j = 'a'; j <= 'z'; j++) {
    				if(last.charAt(i)==j) continue;
    				StringBuffer tmp=new StringBuffer(last);
    				tmp.setCharAt(i, j);
    				if(tmp.toString().equals(end)) return dist+1;
    				if(dict.contains(tmp.toString()) && !map.containsKey(tmp.toString())){
    					queue.add(tmp.toString());
    					map.put(tmp.toString(), dist+1);
    				}
    			}
    		}
		}
        return 0;
    }
    private static boolean onestep(String s,String p){
    	int count=0;
    	for (int i = 0; i < s.length(); i++) {
			if(s.charAt(i)!=p.charAt(i)) count++;
			if(count>1) return false;
		}
    	if(count==1) return true;
    	else return false;
    }
}
