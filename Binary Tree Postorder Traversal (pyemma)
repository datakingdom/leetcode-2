import java.util.*;

public class BinaryTreePostorderTraversal {
	ArrayList<Integer> res;
    public List<Integer> postorderTraversal(TreeNode root) {
        res = new ArrayList<Integer>();
        TreeNode dump = new TreeNode(0);
        dump.left = root; dump.right = null;
        TreeNode cur = dump, tmp;
        while(cur != null) {
            if(cur.left == null) {
                cur = cur.right;
            }
            else {
                tmp = cur.left;
                while(tmp.right != null && tmp.right != cur) tmp = tmp.right;
                
                if(tmp.right == null) {
                    tmp.right = cur;
                    cur = cur.left;
                }
                else {
                    addReverse(cur.left, tmp);
                    tmp.right = null;
                    cur = cur.right;
                }
            }
        }
        return res;
    }
    
    private void reverse(TreeNode from, TreeNode to) {
        if(from == to) return;
        TreeNode x = from, y = from.right, z;
        while(x != to) {
            z = y.right;
            y.right = x;
            x = y;
            y = z;
        }
    }
    
    private void addReverse(TreeNode from, TreeNode to) {
        reverse(from, to);
        TreeNode t = to;
        while(true) {
            res.add(to.val);
            if(to == from) break;
            to = to.right;
        }
        reverse(to, from);
    }
}
